# * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# *
# * Permission is hereby granted, free of charge, to any person obtaining a copy of this
# * software and associated documentation files (the "Software"), to deal in the Software
# * without restriction, including without limitation the rights to use, copy, modify,
# * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# * permit persons to whom the Software is furnished to do so.
# *
# * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

AWSTemplateFormatVersion: 2010-09-09
Description: Control Tower Account Factory Solution Deployment Template
Parameters:
  CreateConfigurationBucket:
    Description: Do you want to create configuration S3 bucket true|false
    Type: String 
    Default: true
    AllowedValues:
    - true
    - false  
  ConfigurationBucketName:
    Description: Name of S3 Configuration Bucket
    Type: String
  ConfigurationFileName:
    Description: Name and prefix of the configuration file
    Type: String
    Default: config.yml    
  UpdateFileName:
    Description: Name and prefix of the update file
    Type: String
    Default: update.yml     
  SourceCodeBucketName:
    Description: Name of S3 Bucket with lambda zipped source code
    Type: String       
  SourceCodePackageName:
    Description: Name of code package including prefix
    Type: String    
    Default: control-tower-account-factory-solution.zip  
  BaselineFunctionName:
    Description: Account Factory Lambda Function Name
    Type: String
    Default: control-tower-account-factory-lambda
  BaselinetLambdaRoleName:
    Description: Account Factory Lambda Function Role Name
    Type: String
    Default: control-tower-account-factory-lambda-role
  StateMachineName:
    Description: Name of Step Function State Machine
    Type: String
    Default: control-tower-account-factory-state-machine   
  StateMachineRoleName:
    Description: Name of Step Function State Machine IAM Role
    Type: String
    Default: control-tower-account-factory-state-machine-role       
  MaxIterations:
    Description: Maximum number of iteration for step funtion before report error
    Type: Number
    Default: 30
  TrackingTableName:
    Description: Name of the DynamoDB table to track product deployments and updates
    Type: String
    Default: control-tower-account-factory-tracking-table    
  TopicName:
    Description: Name of SNS Topic to send notification
    Type: String
    Default: control-tower-account-factory-notification  
  NotificationEmail:
    Description: Email address where to send notification
    Type: String    
    Default: ''  

Conditions:
  CreateConfigurationBucket: !Equals [!Ref CreateConfigurationBucket, 'true']
  CreateNotification: !Not [!Equals [!Ref NotificationEmail, '']]

Resources:
 
  BaselineLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref BaselinetLambdaRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        -
          PolicyName: "Lambda"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - servicecatalog:List*
                  - servicecatalog:Search*
                  - servicecatalog:Describe*
                  - servicecatalog:UpdateConstraint
                  - servicecatalog:CreateConstraint
                  - servicecatalog:ProvisionProduct
                  - servicecatalog:AssociatePrincipalWithPortfolio
                  - servicecatalog:DeleteConstraint
                  - servicecatalog:UpdateProvisionedProduct
                  - organizations:ListRoots
                  - organizations:DescribeAccount
                  - organizations:ListChildren
                  - organizations:DescribeOrganization
                  - organizations:DescribeOrganizationalUnit
                  - organizations:ListAccountsForParent
                  - organizations:ListOrganizationalUnitsForParent
                  - organizations:ListParents
                  - states:SendTaskSuccess
                  - states:StartExecution
                  - states:SendTaskFailure                  
                  - cloudformation:CreateStackSet
                  - cloudformation:CreateStackInstances
                  - cloudformation:Describe*
                  - cloudformation:List*
                  - cloudformation:UpdateStackSet
                  - iam:GetRole
                  - s3:GetObject
                  - sns:Publish
                  - kms:Decrypt
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/service-role/AWSControlTowerStackSetRole'
              -
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TrackingTableName}'                

  BaselineStateMachineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref StateMachineRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        -
          PolicyName: "StateMachine"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"             
              -
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${BaselineFunctionName}'

  S3Bucket:
    Type: AWS::S3::Bucket
    Condition: CreateConfigurationBucket
    Properties:
      BucketName: !Ref ConfigurationBucketName
      AccessControl: BucketOwnerFullControl
      NotificationConfiguration:
        LambdaConfigurations: 
          - Event: s3:ObjectCreated:*
            Filter: 
              S3Key: 
                Rules:
                  - Name: suffix
                    Value: !Ref UpdateFileName
            Function: !GetAtt BaselineFunction.Arn

  TrackingTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "ProvisionName"
          AttributeType: "S"
        - 
          AttributeName: "Date"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "ProvisionName"
          KeyType: "HASH"
        - 
          AttributeName: "Date"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Ref TrackingTableName

  BaselineFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Ref BaselineFunctionName
      Description: "Custom Control Tower Lifecyle event Lambda to handle baseline new accounts"
      Handler: handler.lambda_handler 
      Role: !GetAtt BaselineLambdaRole.Arn
      Environment:
        Variables:
          configuration_bucket_name: !Ref ConfigurationBucketName
          configuration_file: !Ref ConfigurationFileName
          update_file: !Ref UpdateFileName
          lambda_role: !GetAtt BaselineLambdaRole.Arn
          max_iterations: !Ref MaxIterations
          state_machine_name: !Ref StateMachineName
          notification_topic: !If [CreateNotification , !Ref TopicName, "none"]
          track_table: !Ref TrackingTableName
      Code: 
        S3Bucket: !Ref SourceCodeBucketName
        S3Key: !Ref SourceCodePackageName
      Runtime: python3.8
      Timeout: 900
      ReservedConcurrentExecutions: 10      

  BaselineStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: !Ref StateMachineName
      RoleArn: !GetAtt BaselineStateMachineRole.Arn
      DefinitionString:
        Fn::Sub: |-
          {
            "Comment": "A state machine that deployes products to new Control Tower account",
            "StartAt": "Init-Baseline-Products",
            "States": {
              "Init-Baseline-Products": {
                  "Type": "Task",
                  "Resource": "${BaselineFunction.Arn}",
                  "TimeoutSeconds": 300,
                  "HeartbeatSeconds": 60,
                  "ResultPath": "$",
                  "Next": "Wait-On-Init-Products"
              },
              "Wait-On-Init-Products": {
                  "Type": "Wait",
                  "Seconds": 60,
                  "Next": "Baseline-Products"
              },    
              "Baseline-Products": {
                  "Type": "Task",
                  "Resource": "${BaselineFunction.Arn}",
                  "TimeoutSeconds": 300,
                  "HeartbeatSeconds": 60,
                  "ResultPath": "$",
                  "Next": "Deployment-Status"
              },    
              "Wait-For-Products": {
                  "Type": "Wait",
                  "Seconds": 60,
                  "Next": "Baseline-Products"
              },     
              "Deployment-Status": {
                  "Type": "Choice",
                  "Choices": [
                      {
                          "Variable": "$.status",
                          "StringEquals": "progress",
                          "Next": "Wait-For-Products"
                      },    
                      {
                          "Variable": "$.status",
                          "StringEquals": "done",
                          "Next": "Success"
                      }
                  ]
              },
              "Success": {
                "Type": "Succeed"
              }
            }
          }          

  ControlTowerEvent:
      Type: AWS::Events::Rule
      Properties:
        Description: Fire lambda on Control Tower new account creation
        EventPattern:
          source:
            - aws.controltower
          detail-type:
            - AWS Service Event via CloudTrail
          detail:
            serviceEventDetails:
              createManagedAccountStatus:
                state:
                  - SUCCEEDED
            eventName:
              - CreateManagedAccount
        Name: 'Controle-Tower-Baseline-New-Account'
        Targets:
          - Id: 'Controle-Tower-Baseline-Lambda'
            Arn: !GetAtt BaselineFunction.Arn

  ControlTowerEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BaselineFunctionName
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ControlTowerEvent.Arn
      SourceAccount: !Ref "AWS::AccountId"

  SNSTopic:
    Type: AWS::SNS::Topic
    Condition: CreateNotification
    Properties:
      Subscription:
        - Endpoint: !Ref NotificationEmail
          Protocol: "email"
      TopicName: !Ref TopicName